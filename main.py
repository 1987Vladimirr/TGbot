from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
import datetime
from telegram.ext import (Application,CommandHandler,CallbackContext,MessageHandler,filters,)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID)
ADMIN_ID = 1978304524 #1009629774 - id –∂–µ–Ω—è
Token = "7697134194:AAEzttiNl1821D0_ifa4JP5PhG_NKuxqrw0"

STEP_SERVICE = "–≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏"
STEP_DATE = "–≤—ã–±–æ—Ä –¥–∞—Ç—ã"
STEP_TIME = "–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"
STEP_NAME = "–≤–≤–æ–¥ –∏–º–µ–Ω–∏"
STEP_PHONE = "–≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
# –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä: {(–¥–∞—Ç–∞, –≤—Ä–µ–º—è): True})
occupied_slots = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_data[update.message.chat.id] = {}
    keyboard = [["–î–µ–ø–∏–ª—è—Ü–∏—è", "–≠–ª–µ–∫—Ç—Ä–æ—ç–ø–∏–ª—è—Ü–∏—è"],["–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã", "–õ–∏—Ñ—Ç–∏–Ω–≥ –ª–∏—Ü–∞"],["–û—Ç–º–µ–Ω–∞"],]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)
    user_data[update.message.chat.id]["step"] = STEP_SERVICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    chat_id = update.message.chat.id
    text = update.message.text

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ chat_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ user_data
    if chat_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥—è /start.")
        return

    if user_data[chat_id].get("step") == STEP_SERVICE:
        if text in ["–î–µ–ø–∏–ª—è—Ü–∏—è", "–≠–ª–µ–∫—Ç—Ä–æ—ç–ø–∏–ª—è—Ü–∏—è", "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã", "–õ–∏—Ñ—Ç–∏–Ω–≥ –ª–∏—Ü–∞"]:
            user_data[chat_id]["service"] = text
            user_data[chat_id]["step"] = STEP_DATE

            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.03.2025):")
            
        elif text == "–û—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /start.",reply_markup=ReplyKeyboardRemove())
            
            user_data.pop(chat_id, None)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.")

    elif user_data[chat_id].get("step") == STEP_DATE:
        user_data[chat_id]["date"] = text
        user_data[chat_id]["step"] = STEP_TIME

        keyboard = [["09:00", "10:00", "12:00", "14:00", "16:00"] ,  ["18:00", "20:00", "–û—Ç–º–µ–Ω–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å:", reply_markup=reply_markup)

    elif user_data[chat_id].get("step") == STEP_TIME:
        selected_date = user_data[chat_id].get("date")
        if text in ["09:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00"]:
            if (selected_date, text) in occupied_slots:
                await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            else:
                user_data[chat_id]["time"] = text
                user_data[chat_id]["step"] = STEP_NAME
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        elif text == "–û—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /start.",reply_markup=ReplyKeyboardRemove())
            user_data.pop(chat_id, None)

    elif user_data[chat_id].get("step") == STEP_NAME:
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = STEP_PHONE
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif user_data[chat_id].get("step") == STEP_PHONE:
        user_data[chat_id]["phone"] = text

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        service = user_data[chat_id].get("service", "")
        selected_date = user_data[chat_id].get("date", "")
        time = user_data[chat_id].get("time", "")
        name = user_data[chat_id].get("name", "")
        phone = user_data[chat_id].get("phone", "")

        if all([service, selected_date, time, name, phone]):
            # –ü–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
            occupied_slots[(selected_date, time)] = True


        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! ‚úÖ\n"
            f"‚ú® *–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞:* _{service}_\n"
            f"üìÖ *–î–∞—Ç–∞:* _{selected_date}_\n"
            f"‚è∞ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:* _{time}_\n"
            f"üôã‚Äç‚ôÇÔ∏è *–ò–º—è:* _{name}_\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* _{phone}_\n"
            f"–î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è! üìûüíñ",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
           
        )
            

        await update.message.reply_text(
            "–ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /start.",)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                f"üåü *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!* üåü\n"
                f"üõ† *–£—Å–ª—É–≥–∞:* _{service}_\n"
                f"üìÖ *–î–∞—Ç–∞:* _{selected_date}_\n"
                f"‚è∞ *–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:* _{time}_\n"
                f"üôã‚Äç‚ôÇÔ∏è *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* _{name}_\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* _{phone}_\n" "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –¥–ª—è –í–∞—Å –≤—Ä–µ–º–µ–Ω–∏!"),
            parse_mode="Markdown")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(chat_id, None)
        
#         # # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏
#         reminder_time = datetime.datetime.strptime(user_data[chat_id]["date"], "%d.%m.%Y") - datetime.timedelta(days=1)
#         new_func(context, chat_id, reminder_time)
#         user_data.pop(chat_id, None)

# def new_func(context, chat_id, reminder_time):
#     context.job_queue.run_once(send_reminder, when=reminder_time, context=chat_id)



# async def send_reminder(context: CallbackContext):
#     chat_id = context.job.context
#     keyboard = [["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]]
#     reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
#     await context.bot.send_message(
#         chat_id=chat_id,
#         text="–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:",
#         reply_markup=reply_markup
#     )

# async def handle_confirmation(update: Update, context: CallbackContext):
#     chat_id = update.message.chat.id
#     text = update.message.text
#     if text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
#         await update.message.reply_text(
#             "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –ø—Ä–∏–µ–º–µ.",
#             reply_markup=ReplyKeyboardRemove()
#         )
#     elif text == "–û—Ç–º–µ–Ω–∏—Ç—å":
#         # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
#         for slot in occupied_slots.keys():
#             if slot[0] == user_data[chat_id]["date"] and slot[1] == user_data[chat_id]["time"]:
#                 del occupied_slots[slot]
#                 break
#         await update.message.reply_text(
#             "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
#             reply_markup=ReplyKeyboardRemove()
        #)

def main():
    application = Application.builder().token(Token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    #application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|–û—Ç–º–µ–Ω–∏—Ç—å)$"), handle_confirmation))

    application.run_polling()

if __name__ == "__main__":
    main()
    